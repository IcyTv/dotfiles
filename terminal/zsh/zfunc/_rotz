#compdef rotz

autoload -U is-at-least

_rotz() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-d+[Overwrites the dotfiles path set in the config file]:DOTFILES:_default' \
'--dotfiles=[Overwrites the dotfiles path set in the config file]:DOTFILES:_default' \
'-c+[Path to the config file]:CONFIG:_default' \
'--config=[Path to the config file]:CONFIG:_default' \
'-r[When this switch is set no changes will be made]' \
'--dry-run[When this switch is set no changes will be made]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_rotz_commands" \
"*::: :->rotz" \
&& ret=0
    case $state in
    (rotz)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:rotz-command-$line[1]:"
        case $line[1] in
            (clone)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':repo -- The url of the repository passed to the git clone command:_default' \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
'::repo -- The url of the repository passed to the git init command:_default' \
&& ret=0
;;
(link)
_arguments "${_arguments_options[@]}" : \
'-l+[Which link type to use for linking dotfiles]:LINK_TYPE:((symbolic\:"Uses symbolic links for linking"
hard\:"Uses hard links for linking"))' \
'--link-type=[Which link type to use for linking dotfiles]:LINK_TYPE:((symbolic\:"Uses symbolic links for linking"
hard\:"Uses hard links for linking"))' \
'-f[Force link creation if file already exists and was not created by rotz]' \
'--force[Force link creation if file already exists and was not created by rotz]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::dots -- All dots to process. Accepts glob patterns:_default' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
'-c[Continues installation when an error occurs during installation]' \
'--continue-on-error[Continues installation when an error occurs during installation]' \
'-d[Do not install dependencies]' \
'--skip-dependencies[Do not install dependencies]' \
'-i[Do not install installation dependencies]' \
'--skip-installation-dependencies[Do not install installation dependencies]' \
'-a[Do not install any dependencies]' \
'--skip-all-dependencies[Do not install any dependencies]' \
'-h[Print help]' \
'--help[Print help]' \
'*::dots -- All dots to process. Accepts glob patterns:_default' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::shell:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_rotz__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:rotz-help-command-$line[1]:"
        case $line[1] in
            (clone)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(link)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_rotz_commands] )) ||
_rotz_commands() {
    local commands; commands=(
'clone:Clones a dotfiles git repository' \
'init:Creates a dotfiles git repository and config' \
'link:Links dotfiles to the filesystem' \
'install:Installs applications using the provided commands' \
'completions:Adds completions to shell' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'rotz commands' commands "$@"
}
(( $+functions[_rotz__clone_commands] )) ||
_rotz__clone_commands() {
    local commands; commands=()
    _describe -t commands 'rotz clone commands' commands "$@"
}
(( $+functions[_rotz__completions_commands] )) ||
_rotz__completions_commands() {
    local commands; commands=()
    _describe -t commands 'rotz completions commands' commands "$@"
}
(( $+functions[_rotz__help_commands] )) ||
_rotz__help_commands() {
    local commands; commands=(
'clone:Clones a dotfiles git repository' \
'init:Creates a dotfiles git repository and config' \
'link:Links dotfiles to the filesystem' \
'install:Installs applications using the provided commands' \
'completions:Adds completions to shell' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'rotz help commands' commands "$@"
}
(( $+functions[_rotz__help__clone_commands] )) ||
_rotz__help__clone_commands() {
    local commands; commands=()
    _describe -t commands 'rotz help clone commands' commands "$@"
}
(( $+functions[_rotz__help__completions_commands] )) ||
_rotz__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'rotz help completions commands' commands "$@"
}
(( $+functions[_rotz__help__help_commands] )) ||
_rotz__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'rotz help help commands' commands "$@"
}
(( $+functions[_rotz__help__init_commands] )) ||
_rotz__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'rotz help init commands' commands "$@"
}
(( $+functions[_rotz__help__install_commands] )) ||
_rotz__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'rotz help install commands' commands "$@"
}
(( $+functions[_rotz__help__link_commands] )) ||
_rotz__help__link_commands() {
    local commands; commands=()
    _describe -t commands 'rotz help link commands' commands "$@"
}
(( $+functions[_rotz__init_commands] )) ||
_rotz__init_commands() {
    local commands; commands=()
    _describe -t commands 'rotz init commands' commands "$@"
}
(( $+functions[_rotz__install_commands] )) ||
_rotz__install_commands() {
    local commands; commands=()
    _describe -t commands 'rotz install commands' commands "$@"
}
(( $+functions[_rotz__link_commands] )) ||
_rotz__link_commands() {
    local commands; commands=()
    _describe -t commands 'rotz link commands' commands "$@"
}

if [ "$funcstack[1]" = "_rotz" ]; then
    _rotz "$@"
else
    compdef _rotz rotz
fi
